(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{275:function(t,e,s){t.exports=s.p+"assets/img/PythonDebug_AttachToProcess.329866fc.png"},276:function(t,e,s){t.exports=s.p+"assets/img/PythonDebug_DebugTheseCodeTypes.e5e12dc3.png"},277:function(t,e,s){t.exports=s.p+"assets/img/PythonDebug_KeysightTapGuiExe.050a3ea1.png"},278:function(t,e,s){t.exports=s.p+"assets/img/PythonDebug_StopButtonEnabled.838420ba.png"},297:function(t,e,s){"use strict";s.r(e);var a=s(14),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"debugging-your-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#debugging-your-code"}},[t._v("#")]),t._v(" Debugging Your Code")]),t._v(" "),e("p",[t._v("Two modes are support for debugging")]),t._v(" "),e("ul",[e("li",[t._v("Remote Attaching to the running process in Visual Studio Code.")]),t._v(" "),e("li",[t._v("Native Code debugging (Visual Studio / Windows only)")])]),t._v(" "),e("p",[t._v("To follow this guide use an OpenTAP GUI like PathWave Test Automation or OpenTAP TUI.")]),t._v(" "),e("h2",{attrs:{id:"remote-attaching-to-the-running-process-with-vs-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remote-attaching-to-the-running-process-with-vs-code"}},[t._v("#")]),t._v(" Remote Attaching to the Running Process With VS Code")]),t._v(" "),e("ol",[e("li",[t._v("Install the debugpy package using 'pip'. This can also be done by installing the PythonExamples package.")]),t._v(" "),e("li",[t._v("Enable debugging in Python Settings.")]),t._v(" "),e("li",[t._v("Start you OpenTAP GUI")]),t._v(" "),e("li",[t._v("From VS Code, open the folder containg your code. For example the OpenTAP installation folder.")]),t._v(" "),e("li",[t._v("Set a break point in your code")]),t._v(" "),e("li",[t._v("Click F5 and use 'Python: Remote Attach'")])]),t._v(" "),e("p",[t._v("This should generate a launch.json file like so:")]),t._v(" "),e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use IntelliSense to learn about possible attributes.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hover to view descriptions of existing attributes.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0.2.0"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"configurations"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Python: Remote Attach"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"python"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"request"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"attach"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"connect"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"host"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"port"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5678")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pathMappings"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"localRoot"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${workspaceFolder}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"remoteRoot"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"."')]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"justMyCode"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The 'Attach using Process Id' debugging option is also available on some platforms, but may not be as reliable.")]),t._v(" "),e("p",[t._v("In case an error occurs due to port 5678 being used by another process, the debugging port can be configured in the Python settings panel.")]),t._v(" "),e("h2",{attrs:{id:"native-code-debugging"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#native-code-debugging"}},[t._v("#")]),t._v(" Native Code Debugging")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Launch your OpenTAP GUI.")])]),t._v(" "),e("li",[e("p",[t._v("Start up Microsoft Visual Studio, and select Debug, Attach to Process.")])])]),t._v(" "),e("p",[e("img",{attrs:{src:s(275),alt:""}})]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("Click on Select, then select "),e("code",[t._v("Debug these code types:")]),t._v(", select Python and click OK.")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(276),alt:""}})]),t._v(" "),e("ol",{attrs:{start:"5"}},[e("li",[t._v("Select Editor.exe from the available process list and click attach.")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(277),alt:""}})]),t._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[t._v("If there is no error message shown, and the stop button is enabled, you can now feel free to debug the Python script.")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(278),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"debugging-and-threads"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#debugging-and-threads"}},[t._v("#")]),t._v(" Debugging And Threads")]),t._v(" "),e("p",[t._v("When you debug multi-threaded Python applications, you might need to register each new thread you create. This is not the case for 'native debugging', but when using debugpy, the thread needs to be registered.")]),t._v(" "),e("p",[t._v("To ensure debugging works in a given thread, call "),e("code",[t._v("opentap.debug_this_thread()")]),t._v(".")]),t._v(" "),e("p",[t._v("This is already being done from the opentap.TestStep baseclass, but in other contexts you might to call it explicitly.")]),t._v(" "),e("p",[t._v("The only way you notice the problem is that breakpoints does not get registered in the given thread.")]),t._v(" "),e("p",[t._v("Additionally, debugging can lead to instabilities on Linux and MacOS, most often noticed by a segmentation fault towards the end of a process.")])])}),[],!1,null,null,null);e.default=n.exports}}]);